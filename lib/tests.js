// Generated by CoffeeScript 1.4.0
(function() {
  var People, Person, assert,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Person = (function(_super) {

    __extends(Person, _super);

    function Person() {
      return Person.__super__.constructor.apply(this, arguments);
    }

    return Person;

  })(Backbone.Model);

  People = (function(_super) {

    __extends(People, _super);

    function People() {
      return People.__super__.constructor.apply(this, arguments);
    }

    return People;

  })(Backbone.Collection);

  assert = new expect.Assertion;

  suite('Backbone-Filtering', function() {
    var allThePeople, createPersonInCollection, people;
    allThePeople = new People;
    people = {};
    createPersonInCollection = function(name, age, collection) {
      var person;
      person = new Person;
      people[name] = person;
      person.set("Name", name);
      person.set("Age", age);
      return collection.add(person);
    };
    setup(function() {
      allThePeople = new People;
      createPersonInCollection("Neil", 10, allThePeople);
      createPersonInCollection("Percy", 40, allThePeople);
      createPersonInCollection("Marion", 23, allThePeople);
      return createPersonInCollection("Hilda", 63, allThePeople);
    });
    suite('Basic Filtering', function() {
      test('The setup is ok', function() {
        return expect(allThePeople.length).to.equal(4);
      });
      test('Creating a filtered collection of under 30s', function() {
        var under30s;
        under30s = allThePeople.filter(function() {
          return this.get("Age") < 30;
        });
        return expect(under30s.length).to.equal(2);
      });
      test('Adding elements to the base collection', function() {
        var under30s;
        under30s = allThePeople.filter(function() {
          return this.get("Age") < 30;
        });
        createPersonInCollection("Smithy", 12, allThePeople);
        return expect(under30s.length).to.equal(3);
      });
      test('Removing elements from the base collection', function() {
        var under30s;
        under30s = allThePeople.filter(function() {
          return this.get("Age") < 30;
        });
        allThePeople.remove(people.Marion);
        return expect(under30s.length).to.equal(1);
      });
      return test('Updating an element in the base collection which then matches the filter', function() {
        var under30s;
        under30s = allThePeople.filter(function() {
          return this.get("Age") < 30;
        });
        people.Percy.set("Age", 29);
        return expect(under30s.length).to.equal(3);
      });
    });
    suite('Events', function() {
      test('An add event is fired when a matching element is added to the base collection', function() {
        var addEventTriggered, under30s;
        under30s = allThePeople.filter(function() {
          return this.get("Age") < 30;
        });
        addEventTriggered = false;
        under30s.on("add", function() {
          if (addEventTriggered) {
            return expect.fail("The event was triggered twice");
          } else {
            return addEventTriggered = true;
          }
        });
        createPersonInCollection("Sheila", 2, allThePeople);
        return expect(addEventTriggered).to.be(true);
      });
      return test('A remove event is fired when a matching element is removed from the base collection', function() {
        var removeEventTriggered, under30s;
        under30s = allThePeople.filter(function() {
          return this.get("Age") < 30;
        });
        removeEventTriggered = false;
        under30s.on("remove", function() {
          if (removeEventTriggered) {
            return expect.fail("The event was triggered twice");
          } else {
            return removeEventTriggered = true;
          }
        });
        allThePeople.remove(people.Neil);
        return expect(removeEventTriggered).to.be(true);
      });
    });
    return suite('Multiple Filters', function() {
      test('A collection with two filters', function() {
        var thirtyOrOvers, under30s;
        under30s = allThePeople.filter(function() {
          return this.get("Age") < 30;
        });
        thirtyOrOvers = allThePeople.filter(function() {
          return this.get("Age") >= 30;
        });
        expect(under30s.length).to.equal(2);
        return expect(thirtyOrOvers.length).to.equal(2);
      });
      return test('Updating an element so it moves from one filtered collection to the other', function() {
        var thirtyOrOvers, under30s;
        under30s = allThePeople.filter(function() {
          return this.get("Age") < 30;
        });
        thirtyOrOvers = allThePeople.filter(function() {
          return this.get("Age") >= 30;
        });
        people.Neil.set("Age", 32);
        expect(under30s.length).to.equal(1);
        return expect(thirtyOrOvers.length).to.equal(3);
      });
    });
  });

}).call(this);

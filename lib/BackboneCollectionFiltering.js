// Generated by CoffeeScript 1.3.3
(function() {
  var Backbone, BackboneFilteredCollection, oldFilter, socket, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  socket = $.atmosphere;

  Backbone = this.Backbone;

  _ = this._;

  oldFilter = Backbone.Collection.prototype.filter;

  BackboneFilteredCollection = (function(_super) {

    __extends(BackboneFilteredCollection, _super);

    BackboneFilteredCollection.uniqueContext = function() {
      if (this.lastNumber != null) {
        this.lastNumber++;
      } else {
        this.lastNumber = 1;
      }
      return "BackboneFilteredCollection" + this.lastNumber;
    };

    function BackboneFilteredCollection(sourceCollection, filter, context) {
      var _this = this;
      this.sourceCollection = sourceCollection;
      this.filter = filter;
      this.context = context != null ? context : BackboneFilteredCollection.uniqueContext();
      BackboneFilteredCollection.__super__.constructor.call(this);
      this.addAllMatching(this.sourceCollection.models);
      this.sourceCollection.on("add", (function(model) {
        return _this.handleAdd(model);
      }), this.context);
      this.sourceCollection.on("reset", (function() {
        return _this.handleReset(_this.sourceCollection.models);
      }), this.context);
    }

    BackboneFilteredCollection.prototype.handleAdd = function(model) {
      this.addListener(model);
      if (this.filter(model)) {
        return this.originalAdd(model);
      }
    };

    BackboneFilteredCollection.prototype.addListener = function(model) {
      var _this = this;
      return model.on("change", (function(model) {
        return _this.handleChange(model);
      }), this.context);
    };

    BackboneFilteredCollection.prototype.handleChange = function(model) {
      if (_.contains(this.models, model)) {
        if (!(this.filter(model))) {
          return this.remove(model);
        }
      } else {
        if (this.filter(model)) {
          return this.originalAdd(model);
        }
      }
    };

    BackboneFilteredCollection.prototype.handleReset = function(newModels) {
      this.removeListener(this.models);
      return this.addAllMatching(newModels);
    };

    BackboneFilteredCollection.prototype.addAllMatching = function(models) {
      var model, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = models.length; _i < _len; _i++) {
        model = models[_i];
        _results.push(this.handleAdd(model));
      }
      return _results;
    };

    BackboneFilteredCollection.prototype.originalAdd = function() {
      return BackboneFilteredCollection.__super__.add.apply(this, arguments);
    };

    BackboneFilteredCollection.prototype.add = function() {
      return this.sourceCollection.add.apply(this, arguments);
    };

    BackboneFilteredCollection.prototype.fetch = function() {
      return console.log("no fetch, should delegate");
    };

    return BackboneFilteredCollection;

  })(Backbone.Collection);

  Backbone.Collection.prototype.filter = function(filter) {
    return new BackboneFilteredCollection(this, filter);
  };

}).call(this);
